pets
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
milo<-data.frame(Name="Milo",Months.old=67,Size="small",Weight=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size<-c("meduim","small","meduim","Large","small","extra small","large")
Weight<-c(21,8,4,6,7,2,36)
Breed<-c("dog","dog","cat","cat","dog","cat","dog")
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight(Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
Vaccinated <-c("yes","yes","no","yes","no","no","yes")
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
milo<-data.frame(Name="Milo",Months.old=67,Size="small",Weight=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
milo<-data.frame(Name="Milo","Months old"=67,Size="small","Weight(Kg)"=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
#How many rows and columns does the data frame pets have
nrow(pets)
ncol(pets)
str(pets)
typeof(pets)
class(diamonds)
str(diamonds)
diamonds.df <- as data.frame(diamonds)
class(diamonds.df)
# alternatively
str(diamonds)
diamonds.df <- as.data.frame(diamonds)
class(diamonds.df)
str(USJudgeRatings)
my.df <- USJudgeRatings
my.df$AVRG <- rowMeans(my.df)
avrg <- my.df["AVRG"]
pets <- as data.frame(pets)
pets <- as.data.frame(pets)
pets.df <- as.data.frame(pets)
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size<-c("meduim","small","meduim","Large","small","extra small","large")
Weight<-c(21,8,4,6,7,2,36)
Breed<-c("dog","dog","cat","cat","dog","cat","dog")
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight(Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
#adding the Vaccinated column
Vaccinated <-c("yes","yes","no","yes","no","no","yes")
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
# adding the milo observation(row)
milo<-data.frame(Name="Milo","Months old"=67,Size="small","Weight(Kg)"=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets <- as.data.frame(pets)
#How many rows and columns does the data frame pets have
nrow(pets)
ncol(pets)
str(pets)
class(pets)
#Load the diamonds data set, check if it is a data frame and if not change it to one.
class(diamonds)
diamonds.df <- as data.frame(diamonds)
diamonds.df <- as.data.frame(diamonds)
class(diamonds.df)
diamonds.df
#Load the UsJudgeRatings data set, check the class , if not a data frame converti it to one
class(USJudgeRatings)
USJudgeRatings
my.df <- USJudgeRatings
my.df$AVRG <- rowMeans(my.df)
averg <- my.df["AVRG"]
averg
View(pets)
eg.na <-c(NA,1:10)
eg.na
mean(eg.na)
#Removing the NA values in the arithmatic
mean(eg.na, na.rm = T)
head(my.wars)
clase(starwars)
class(starwars)
my.wars < as.data.frame(starwars)
my.wars <- as.data.frame(starwars)
my.wars
#Finding out where the NA values are in a data frame
head(my.wars)
my.wars
my.wars
#Finding out where the NA values are in a data frame
is.na(my.wars)
View(my.wars)
View(my.wars)
View(my.wars)
View(my.wars)
any(is.na(my.wars))
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$name))
any(is.na(my.wars[,c("name","homeworld","species")]))
View(my.wars)
View(my.wars)
#looking for the places where there are NA values in the following columns"name","homeworld","species"
(is.na(my.wars[,c("name","homeworld","species")]))
#Replacing NA values in the "species" column
my.wars$species[is.na(my.wars$species)]<- "Unknown"
subset(my.wars,species == "Unknown")
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$hight)]<- median(my.wars$height, na.rm = T)
my.wars$height
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$hight)]<- median(my.wars$height, na.rm = T)
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$height)]<- median(my.wars$height, na.rm = T)
my.wars$height
View(my.wars)
View(my.wars)
my.wars <- as.data.frame(starwars)
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$species)) # will return true if there are NA values in the name column
name
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$name)) # will return true if there are NA values in the name column
head(my.wars)
class(starwars)
my.wars <- as.data.frame(starwars)
my.wars
any(is."Unknown"(my.wars$species))
eg.na <-c(NA,1:10)
eg.na
mean(eg.na)
#Removing the NA values in the arithmatic
mean(eg.na, na.rm = T)
head(my.wars)
my.wars <- as.data.frame(starwars)
class(starwars)
starwars
data()
library(tidyverse)
class(starwars)
my.wars <- as.data.frame(starwars)
my.wars
head(my.wars)
View(my.wars)
View(my.wars)
any(is.na(my.wars[,c("name","homeworld","species")])) # returns true if there are NA vaues in the following columns"name","homeworld","species"
#Replacing NA values in the "species" column
my.wars$species[is.na(my.wars$species)]<- "Unknown"
subset(my.wars,species == "Unknown")
my.wars <- as.data.frame(starwars)
#Chaning missing numerical values with the median of the column
my.wars$birth_year[is.na(my.wars$birth_year)]<- median(my.wars$birth_year, na.rm = T)
my.wars <- as.data.frame(starwars)
get wd()
getwd()
library(tidyverse)
df1<-as.tibble(read.csv("skew-1.csv",header = T , stringsAsFactors = F))
setwd("C:/Users/raymondk/Desktop/Study/R programming for statistics and data science/Working directory/Lesson 101")
setwd("C:/Users/raymondk/Desktop/Study/R programming for statistics and data science/Working directory/Lesson 101")
df1<-as.tibble(read.csv("skew-1.csv",header = T , stringsAsFactors = F))
df2<-as.tibble(read.csv("skew-2.csv",header = T , stringsAsFactors = F))
dfc<-as.data.frame(df1,df2)
dfc
summary(dfc)
dfc
dfc<-data_frame(df1,df2)
dfc
summary(dfc)
str(dfc)
df1p<-ggplot(dfc,aes(x=Dataset.1))+
geom_histogram(binwidth = 1,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
df1p<-ggplot(dfc,aes(x=df$Dataset.1))+
geom_histogram(binwidth = 1,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
summary(dfc)
df1p<-ggplot(dfc,aes(x=df1.Dataset.1))+
geom_histogram(binwidth = 1,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
`colnames<-`(df1.Dataset.1,"x")
dfc
colnames<-(df1.Dataset.1,"x")
df1p<-ggplot(df1,aes(x=Dataset.1))+
geom_histogram(binwidth = 1,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
sk1<-as.tibble(read.csv("skew-1.csv",header = T , stringsAsFactors = F))
sk2<-as.tibble(read.csv("skew-2.csv",header = T , stringsAsFactors = F))
skew1<-ggplot(sk1,aes(x=Dataset.1))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
sk1<-read.csv("skew-1.csv")
sk1<-read.csv("skew-1.csv")
sk2<read.csv("skew-2.csv")
skew1<-ggplot(sk1,aes(x=Dataset.1))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
sk1<-read.csv("skew-1.csv")
sk2<-read.csv("skew-2.csv")
skew1<-ggplot(sk1,aes(x='Dataset.1'))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
df1p
skew1
skew1<-ggplot(sk1,aes(x=Dataset.1))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
skew1
skew2<-ggplot(sk2,aes(x=Dataset.2))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Positive skew",subtitle = "mean>median")
skew2
skew2<-ggplot(sk2,aes(x=Dataset.2))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Negative skew",subtitle = "mean>median")
skew2
skew2<-ggplot(sk2,aes(x=Dataset.2))+
geom_histogram(binwidth = 100,color="white",fill="red4")+
theme_light()+
labs(title = "Negative skew",subtitle = "mean<median")
skew2
library(psych)
library(tidyverse)
package(psych)
skwC<-data_frame(sk1,sk2)
summary(skwC)
install.packages(c("BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "jsonlite", "knitr", "mime", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "Rcpp", "rlang", "rmarkdown", "rstudioapi", "scales", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "jsonlite", "knitr", "mime", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "Rcpp", "rlang", "rmarkdown", "rstudioapi", "scales", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "jsonlite", "knitr", "mime", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "Rcpp", "rlang", "rmarkdown", "rstudioapi", "scales", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("BH", "broom", "callr", "cli", "digest", "dplyr", "fansi", "jsonlite", "knitr", "mime", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "Rcpp", "rlang", "rmarkdown", "rstudioapi", "scales", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
df<-c(1,2,3,4,5,6,7,8,9,10)
summary(df)
sapply(df,mean)
sapply(df,mean)
sapply(df,var()
sapply(df,var)
sapply(df,Var)
dfc<-data_frame(df1,df1)
df2<-c(1,2,3,4,5,6,7,8,9,10)
dfc<-data_frame(df1,df1)
library(tidyverse)
df1<-c(1,2,3,4,5,6,7,8,9,10)
df2<-c(1,2,3,4,5,6,7,8,9,10)
dfc<-data_frame(df1,df1)
summary(df)
sapply(df,Var)
sapply(df,var)
df1<-c(1,2,3,4,5,6,7,8,9,10)
summary(df1)
sapply(df1,var)
lapply(df1,var)
sapply(df1,var)
library(tidyverse)
col.1<-c(1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,5,5,7)
col.2<-c(1,1,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7,7)
col.3<-c(1,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,7,7)
ny<-c(1,2,3,3,5,6,7,8,9,11,66)
la<-c(1,2,3,4,5,6,7,8,9,10,11)
pizza<-data_frame(ny,la)
pizza$ny.mxn<-c(18.81,37.62,56.43,56.43,94.05,112,86,131,67,150.48,169.29,206.91)
pizza
pizza$ny.mxn<-c(18.81,37.62,56.43,56.43,94.05,112.86,131,67,150.48,169.29,206.91)
pizza
sapply(pizza, var)
apply
apply?
lapply(pizza, var)
sapply(pizza, var)
sapply(pizza,mean)
sapply(pizza, var)
sapply(pizza,mean)
coef.var<-sapply(pizza,sd)/sapply(pizza,mean)
coef.var
sapply(pizza,sd)
coef.var<-sapply(pizza,sd)/sapply(pizza,mean)
coef.var
ny<-c(1,2,3,3,5,6,7,8,9,11)
la<-c(1,2,3,4,5,6,7,8,9,10)
pizza<-data_frame(ny,la)
pizza
pizza$ny.mxn<-c(18.81,37.62,56.43,56.43,94.05,112.86,131,67,150.48,169.29,206.91)
pizza$ny.mxn<-c(18.81,37.62,56.43,56.43,94.05,112.86,131,67,150.48,169.29)
pizza
sapply(pizza, var)
sapply(pizza,mean)
sapply(pizza,sd)
coef.var<-sapply(pizza,sd)/sapply(pizza,mean)
coef.var
A = c(9,10,11,7,13)
B = c(10,10,10,10,10)
C = c(1,1,10,19,19)
sapply(a,sd)
A = data_frame( c(9,10,11,7,13))
sapply(a,sd)
summary(A)
sapply(A,mean)
b<-c(8,5,7,6,9)
summary(b)
sapply(b,sd)
b<-data_frame(b)
sapply(b,sd)
round((sapply(b,sd),0)
round((sapply(b,sd)),0)
b$1<-(b-(sapply(b)))
b$s<-c(sapply(b,var))
b
b$s<-c(b-(sapply(b,var)))
b
b$s<-c((b-(sapply(b,var))))
b
b$s<-c(sapply(b))
b$s<-c((sapply(b,sd)))
b
b$s<-c(b-1)
b
b<-c(8,5,7,6,9)
b<-data_frame(b)
b$s<-c(b-1)
b
setwd("C:/Users/raymondk/Desktop/Study/R programming for statistics and data science/Working directory/Lesson 103")
library(tidyverse)
df<-as.tibble(read.csv("landdata-states.csv",stringsAsFactors = F))
homes<-as.tibble(read.csv("landdata-states.csv",stringsAsFactors = F))
View(homes)
nrow(homes)
View(homes)
homes%>%subset(Data==2001.25)%>%ggplot(aes(y=Structure.Cost
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed"),
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")
homes%>%subset(Data==2001.25)%>%ggplot(aes(y=Structure.Cost
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")
homes %>% subset(Data==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth()
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
View(homes)
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_boxplot(se=F)
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
cor.test(homes)
cor(homes$Structure.Cost,homes$Land.Value)
homes %>% #subset(Date==2001.25)
ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
cor(homes$Structure.Cost,homes$Land.Value)
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
cor(homes$Structure.Cost,homes$Land.Value)
A<-c(1,2,3,4,5,6,7,8,9)
b<-c(1,2,3,4,5,6,7,8,9)
x<-data_frame(A,B)
B<-c(1,2,3,4,5,6,7,8,9)
x<-data_frame(A,B)
x
cor(x$a,x$b)
cor(x$A,x$B)
x  %>% ggplot(aes(y=A,
x=B)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
x  %>% ggplot(aes(y=A,
x=B)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
x.p1 %>% ggplot(aes(y=A,
x=B)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
xhist <-ggplot(x,aes(x=A,y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B"
title="Perfect correlation of 1")
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
xhist <-ggplot(x,aes(x=log(A),y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
cor(x$A,x$B)
cor(log(x$A),x$B)
cor(x$A,x$B)
xhist <-ggplot(x,aes(x=sin(A),y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
xhist <-ggplot(x,aes(x=A,y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
cor(x$A,x$B)
A<-c(1,2,3,4,5,6,7,8,9)
B<-c(9,8,7,6,5,4,3,2,1)
x<-data_frame(A,B)
x
cor(x$A,x$B)
xhist <-ggplot(x,aes(x=A,y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
A<-c(1,2,3,4,5,6,7,8,9)
B<-c(1,2,3,4,5,6,7,8,9)
x<-data_frame(A,B)
x
cor(x$A,x$B)
xhist <-ggplot(x,aes(x=A,y=B))
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth(se=F)
xhist + geom_point()+theme_light()+
labs(x="A",
y="B",
title="Perfect correlation of 1")+
stat_smooth()
homes %>% subset(Date==2001.25) %>% ggplot(aes(y=Structure.Cost,
x=log(Land.Value)))+
geom_point()+theme_light()+
labs(x="Land Vlue(transformed",
y= "Structure Cost(USD)",
title="Relationship between land value and structure cost")+
stat_smooth(se=F)
