summary(AirPassengers)
data()
AirPassengers
my.data <-AirPassengers
my.data
my.data<-c("Star Wars","The Empire Strikes Back","Return of the Jedi",
"The Phantom Menace","Attack of the Clones","Revenge of the Sith",
"The Force Awakens")
year<-c(1997,1980,1983,1999,2002,2005,2015)
length.min<-c(121,124,133,133,142,140,135)
box.office.mil<-c(787,534,572,1027,657,849,2059)
my.data <- data.frame("Movie title" = title,"Year"= year,"Lenght in minutes"= length.min ,"Gross"= box.office.mil,stringsAsFactors = F)
my.data
#adding columns (Variables) to the data frame
#Create columns and values
mark<-c(37.5,34.75,34.25,0,0,0.75,0)
carrie<-c(13.5,22.75,21.25,0,0,0.5,5.75)
#Adding columns to data frame with cbind will allow you to add multiple columns in the same line
my.data <- cbind(my.data,MarkScreenTime=mark,CarryScreenTime=carrie)
my.data
str(my.data)
View(my.data)
my.data<-c("Star Wars","The Empire Strikes Back","Return of the Jedi",
"The Phantom Menace","Attack of the Clones","Revenge of the Sith",
"The Force Awakens")
year<-c(1997,1980,1983,1999,2002,2005,2015)
length.min<-c(121,124,133,133,142,140,135)
box.office.mil<-c(787,534,572,1027,657,849,2059)
my.data <- data.frame("Movie title" = title,"Year"= year,"Lenght in minutes"= length.min ,"Gross"= box.office.mil,stringsAsFactors = F)
my.data
#adding columns (Variables) to the data frame
#Create columns and values
mark<-c(37.5,34.75,34.25,0,0,0.75,0)
carrie<-c(13.5,22.75,21.25,0,0,0.5,5.75)
#adding columns using the square brackets
my.data[["MarkScreenTime"]] <- mark
my.data[["CarrieScreenTime"]]<-carrie
my.data
my.data<-c("Star Wars","The Empire Strikes Back","Return of the Jedi",
"The Phantom Menace","Attack of the Clones","Revenge of the Sith",
"The Force Awakens")
year<-c(1997,1980,1983,1999,2002,2005,2015)
length.min<-c(121,124,133,133,142,140,135)
box.office.mil<-c(787,534,572,1027,657,849,2059)
my.data <- data.frame("Movie title" = title,"Year"= year,"Lenght in minutes"= length.min ,"Gross"= box.office.mil,stringsAsFactors = F)
my.data <- data.frame("Movie title" = title,"Year"= year,"Lenght in minutes"= length.min ,"Gross"= box.office.mil,stringsAsFactors = FALSE)
my.data <- data.frame("Movie title" = my.data,"Year"= year,"Lenght in minutes"= length.min ,"Gross"= box.office.mil,stringsAsFactors = FALSE)
my.data
#adding columns (Variables) to the data frame
#Create columns and values
mark<-c(37.5,34.75,34.25,0,0,0.75,0)
carrie<-c(13.5,22.75,21.25,0,0,0.5,5.75)
#Adding columns to data frame with cbind will allow you to add multiple columns in the same line
my.data <- cbind(my.data,MarkScreenTime=mark,CarryScreenTime=carrie)
my.data
str(my.data)
#Adding rows(observations) to the data frame
#You will have to create a small data frame by itself because vectors like mark ect can only have values of the same type
#It is important to name the elements the same as the columns they will be placed into.
rougeOne <-data.frame(Movie.title="Roage One",Year=2016,Lenght.in.minutes=133,
Gross =1051,MarkScreenTime=0,CarryScreenTime=0.25)
#Binding the row to the data frame
rbind(my.data,rougeOne)
my.data
#Binding the row to the data frame
rbind(my.data,rougeOne)
my.data
View(my.data)
View(my.data)
#Adding rows(observations) to the data frame
#You will have to create a small data frame by itself because vectors like mark ect can only have values of the same type
#It is important to name the elements the same as the columns they will be placed into.
rougeOne <-data.frame(Movie.title="Roage One",Year=2016,Lenght.in.minutes=133,
Gross =1051,MarkScreenTime=0,CarryScreenTime=0.25)
#Adding rows(observations) to the data frame
#You will have to create a small data frame by itself because vectors like mark ect can only have values of the same type
#It is important to name the elements the same as the columns they will be placed into.
rougeOne <-data.frame(my.data="Roage One",Year=2016,Lenght.in.minutes=133,
Gross =1051,MarkScreenTime=0,CarryScreenTime=0.25)
#Binding the row to the data frame
rbind(my.data,rougeOne)
str(my.data)
#Adding rows(observations) to the data frame
#You will have to create a small data frame by itself because vectors like mark ect can only have values of the same type
#It is important to name the elements the same as the columns they will be placed into.
rougeOne <-data.frame(Movie.title="Roage One",Year=2016, Lenght.in.minutes=133,
Gross =1051,MarkScreenTime=0,CarryScreenTime=0.25)
#Binding the row to the data frame
rbind(my.data,rougeOne)
my.data
#Adding rows(observations) to the data frame
#You will have to create a small data frame by itself because vectors like mark ect can only have values of the same type
#It is important to name the elements the same as the columns they will be placed into.
rougeOne <-data.frame(Movie.title="Roage One",Year=2016, Lenght.in.minutes=133,
Gross =1051,MarkScreenTime=0,CarryScreenTime=0.25)
#Binding the row to the data frame
rbind(my.data,rougeOne)
my.data
#Binding the row to the data frame
rbind(my.data,rougeOne)
my.data
#Binding the row to the data frame
new.data <- rbind(my.data,rougeOne)
new.data
View(new.data)
View(new.data)
summary(new.data)
library(tidyverse)
ggplot(new.data)
ggplot(new.data[,3])
ggplot(new.data[1,3])
ggplot(new.data[[1,3])
data()
pets
name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size<-c("meduim","small","meduim","Large","small","extra small","large")
Weight<-c(21,8,4,6,7,2,36)
Breed<-c("dog","dog","cat","cat","dog","cat","dog")
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight (Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight(Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
Vaccinated <-c("yes","yes","no","yes","no","no","yes",)
Vaccinated <-c("yes","yes","no","yes","no","no","yes")
cbind(pets,Vaccinated)
pets
pets<-cbind(pets,Vaccinated)
pets
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
milo<-data.frame(Name="Milo",Months.old=67,Size="small",Weight=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size<-c("meduim","small","meduim","Large","small","extra small","large")
Weight<-c(21,8,4,6,7,2,36)
Breed<-c("dog","dog","cat","cat","dog","cat","dog")
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight(Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
Vaccinated <-c("yes","yes","no","yes","no","no","yes")
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
milo<-data.frame(Name="Milo",Months.old=67,Size="small",Weight=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
milo<-data.frame(Name="Milo","Months old"=67,Size="small","Weight(Kg)"=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets
#How many rows and columns does the data frame pets have
nrow(pets)
ncol(pets)
str(pets)
typeof(pets)
class(diamonds)
str(diamonds)
diamonds.df <- as data.frame(diamonds)
class(diamonds.df)
# alternatively
str(diamonds)
diamonds.df <- as.data.frame(diamonds)
class(diamonds.df)
str(USJudgeRatings)
my.df <- USJudgeRatings
my.df$AVRG <- rowMeans(my.df)
avrg <- my.df["AVRG"]
pets <- as data.frame(pets)
pets <- as.data.frame(pets)
pets.df <- as.data.frame(pets)
Name<-c("Flipper","Bromley","Nox","Orion","Dagger","Zizi","Carrie")
Months.old<-c(53,19,34,41,84,140,109)
Size<-c("meduim","small","meduim","Large","small","extra small","large")
Weight<-c(21,8,4,6,7,2,36)
Breed<-c("dog","dog","cat","cat","dog","cat","dog")
pets<-data.frame("Name"=Name,"Months old"=Months.old,"Size"=Size,"Weight(Kg)"=Weight,"Breed"=Breed , stringsAsFactors = F)
pets
#adding the Vaccinated column
Vaccinated <-c("yes","yes","no","yes","no","no","yes")
pets<-cbind(pets,"Vaccinated"=Vaccinated)
pets
# adding the milo observation(row)
milo<-data.frame(Name="Milo","Months old"=67,Size="small","Weight(Kg)"=7,Breed="dog",Vaccinated="yes")
pets<- rbind(pets,milo)
pets <- as.data.frame(pets)
#How many rows and columns does the data frame pets have
nrow(pets)
ncol(pets)
str(pets)
class(pets)
#Load the diamonds data set, check if it is a data frame and if not change it to one.
class(diamonds)
diamonds.df <- as data.frame(diamonds)
diamonds.df <- as.data.frame(diamonds)
class(diamonds.df)
diamonds.df
#Load the UsJudgeRatings data set, check the class , if not a data frame converti it to one
class(USJudgeRatings)
USJudgeRatings
my.df <- USJudgeRatings
my.df$AVRG <- rowMeans(my.df)
averg <- my.df["AVRG"]
averg
View(pets)
eg.na <-c(NA,1:10)
eg.na
mean(eg.na)
#Removing the NA values in the arithmatic
mean(eg.na, na.rm = T)
head(my.wars)
clase(starwars)
class(starwars)
my.wars < as.data.frame(starwars)
my.wars <- as.data.frame(starwars)
my.wars
#Finding out where the NA values are in a data frame
head(my.wars)
my.wars
my.wars
#Finding out where the NA values are in a data frame
is.na(my.wars)
View(my.wars)
View(my.wars)
View(my.wars)
View(my.wars)
any(is.na(my.wars))
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$name))
any(is.na(my.wars[,c("name","homeworld","species")]))
View(my.wars)
View(my.wars)
#looking for the places where there are NA values in the following columns"name","homeworld","species"
(is.na(my.wars[,c("name","homeworld","species")]))
#Replacing NA values in the "species" column
my.wars$species[is.na(my.wars$species)]<- "Unknown"
subset(my.wars,species == "Unknown")
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$hight)]<- median(my.wars$height, na.rm = T)
my.wars$height
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$hight)]<- median(my.wars$height, na.rm = T)
#Chaning missing numerical values with the median of the column
my.wars$height[is.na(my.wars$height)]<- median(my.wars$height, na.rm = T)
my.wars$height
View(my.wars)
View(my.wars)
my.wars <- as.data.frame(starwars)
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$species)) # will return true if there are NA values in the name column
name
#Checking a column or specific set of columns for NA values
any(is.na(my.wars$name)) # will return true if there are NA values in the name column
head(my.wars)
class(starwars)
my.wars <- as.data.frame(starwars)
my.wars
any(is."Unknown"(my.wars$species))
eg.na <-c(NA,1:10)
eg.na
mean(eg.na)
#Removing the NA values in the arithmatic
mean(eg.na, na.rm = T)
head(my.wars)
my.wars <- as.data.frame(starwars)
class(starwars)
starwars
data()
library(tidyverse)
class(starwars)
my.wars <- as.data.frame(starwars)
my.wars
head(my.wars)
View(my.wars)
View(my.wars)
any(is.na(my.wars[,c("name","homeworld","species")])) # returns true if there are NA vaues in the following columns"name","homeworld","species"
#Replacing NA values in the "species" column
my.wars$species[is.na(my.wars$species)]<- "Unknown"
subset(my.wars,species == "Unknown")
my.wars <- as.data.frame(starwars)
#Chaning missing numerical values with the median of the column
my.wars$birth_year[is.na(my.wars$birth_year)]<- median(my.wars$birth_year, na.rm = T)
my.wars <- as.data.frame(starwars)
get wd()
getwd()
billboard.data <- as.tibble(read.csv("billboard.csv", header = T, sep=",",stringsAsFactors = F))
getwd()
setwd("C:/Users/raymondk/Desktop/Study/R programming for statistics and data science/Working directory/Lesson 84")
library(tidyverse)
billboard.data <- as.tibble(read.csv("billboard.csv", header = T, sep=",",stringsAsFactors = F))
billboard.data
View(billboard.data)
View(billboard.data)
#Gather reorganizes data with values as column names
billboard.data>%>
gather(billboard.data,x1st.week:x76th.week, key = "Week", value = "Rank", na.rm = T)%>%
arrange(artist.inverted)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
bt.gathered <- tb.data%>%
gather(tb.data,m,014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
View(tb.data)
str(tb.data)
bt.gathered <- tb.data%>%
gather(tb.data,m.014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
bt.gathered <- tb.clean%>%
gather(tb.data,m.014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
tb.clean.data <-
tb.data >%>
gather(tb.data,m.014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
tb.data >%>
gather(tb.data,m.014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
tb.data >%>
gather(m.014:f.65, key = "column",value="cases",na.rm = T)>%> arrange(country)
str(tb.data)
tb.dataa>%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(artist.inverted)
tb.dataa>%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
tb.data.clean <-tb.dataa>%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
billboard.data <- as.tibble(read.csv("billboard.csv", header = T, sep=",",stringsAsFactors = F))
billboard.data
str(billboard.data)
#Gather reorganizes data with values as column names
billboard.data>%>
gather(billboard.data,x1st.week:x76th.week, key = "Week",  # gathers colums from x1st.week to x76th.week and assigning them into the new column called week
value = "Rank", na.rm = T)%>% # taking the values of those columns and adding them to a new column called rank
arrange(artist.inverted)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
str(tb.data)
tb.data.clean <-tb.dataa>%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
tb <- tb.dataa >%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
tb.cd <- tb.dataa >%>
gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
tb.cd
tb.cd <- tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country)
tb.cd <- (tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)%>%
arrange(country))
tb.cd <- (tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.cd <- (tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) )
tb.cd = tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
tb.cd = tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
str(tb.data)
tb.cd = tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.cd = >%>
tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T)
tb.dataa >%> gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) arrange(country)
tb.cd <- tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) arrange(count)
tb.cd <- tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.cd <- tb.dataa %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.data <- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb.data
str(tb.data)
tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.dataa %>% gather(tb.data,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%arrange(count)
tb.<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
str(tb)
tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(count)
str(tb)
tb.<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
str(tb)
tb.<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
str(tb)
tb<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
str(tb)
tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(count)
tb<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(count)
rlang
tb.data <- tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(count)
tb.data <- tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data <- tb %>% gather(tb,m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb
tb.data <- tb %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data
billboard.data <- as.tibble(read.csv("billboard.csv", header = T, sep=",",stringsAsFactors = F))
billboard.data
str(billboard.data)
#Gather reorganizes data with values as column names
billboard.data>%>
gather(data,x1st.week:x76th.week, key = "Week",  # gathers colums from x1st.week to x76th.week and assigning them into the new column called week
value = "Rank", na.rm = T)%>% # taking the values of those columns and adding them to a new column called rank
arrange(artist.inverted)
#Gather reorganizes data with values as column names
billboard.data>%>
gather(billboard.data,x1st.week:x76th.week, key = "Week",  # gathers colums from x1st.week to x76th.week and assigning them into the new column called week
value = "Rank", na.rm = T)%>% # taking the values of those columns and adding them to a new column called rank
arrange(artist.inverted)
tb<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
str(tb)
tb.data <- tb %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data
View(tb.data)
View(tb)
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"), sep = ".")
tb.seperate
tb.data <- tb %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"))
tb.seperate
tb.data <- tb %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"), sep = ".")
tb.seperate
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"))
tb.seperate
tb.seperate$age <- str_replace_all(tb.seperate$age, "0","0-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "15","15-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "25","25-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "35","35-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "45","45-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "55","55-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "65","65-100")
tb.seperate
#Seperating age now in a low and high value
tb.seperate <- tb.seperate%>% separate(age,into = c("Age.low","Age.high"))
tb.seperate
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"))
tb.seperate
#Using R string to fix column age's values
tb.seperate$age <- str_replace_all(tb.seperate$age, "0","0-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "15","15-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "25","25-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "35","35-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "45","45-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "55","55-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "65","65-100")
tb.seperate
#Seperating age now in a low and high value
tb.seperate <- tb.seperate%>% separate(age,into = c("Age.low","Age.high"))
tb.seperate
#uniting the age high and low columns note seperater defaults to under score
tb.united <- tb.seperate%>% unite("Age.new",c("Age.low","Age.high"))
tb.united
weather <- as.tibble(read.csv("weather.csv"))
weather
#Using spread to spread the element column into its value's tmin&tmax
weather.spread <- spread(weather,key = element,value = value)
weather.spread
tb<- as.tibble(read.csv("tb.csv",header = T,sep = ",",stringsAsFactors = F))
tb
tb.data <- tb %>% gather(m.014:f.65, key = "column",value = "cases", na.rm = T) %>%
arrange(country)
tb.data
#Seperating the column "column into 2 colums sex, and age
tb.seperate <- tb.data %>% separate(column , into = c("sex","age"))
tb.seperate
#Using R string to fix column age's values
tb.seperate$age <- str_replace_all(tb.seperate$age, "0","0-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "15","15-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "25","25-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "35","35-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "45","45-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "55","55-")
tb.seperate$age <- str_replace_all(tb.seperate$age, "65","65-100")
tb.seperate
#Seperating age now in a low and high value
tb.seperate <- tb.seperate%>% separate(age,into = c("Age.low","Age.high"))
tb.seperate
#uniting the age high and low columns note seperater defaults to under score
tb.united <- tb.seperate%>% unite("Age.new",c("Age.low","Age.high"))
tb.united
#Loadinding a new data frame
weather <- as.tibble(read.csv("weather.csv"))
weather
#Using spread to spread the element column into its value's tmin&tmax
weather.spread <- spread(weather,key = element,value = value)
weather.spread
